__builtin_popcountll(t) // 统计t在二进制下1的数量
stoi(t) // 将字符串t转化为int
to_string(t) // 将整数t转化为字符串
INT_MAX/INT_MIN //表示 int 类型所能存储的最大/最小整数
LLONG_MAX/LLONG_MIN // 表示 long long 类型所能存储的最大/最小整数
DBL_MAX/DBL_MIN // 表示 double 类型所能存储的最大/最小实数
setprecision() /*
                double num = 3.1415926535;
                // 输出小数点后2位（四舍五入）
                cout << fixed << setprecision(2) << num << endl;  // 输出：3.14
                */
lower_bound(x) // 返回指向set中第一个不小于（≥）x的元素的迭代器。
upper_bound(x) // 返回指向set中第一个大于（>）x的元素的迭代器。
assert(~) // ~为假则终止执行
fill(vec.begin(), vec.end(), 0); // 将vector所有元素重置为0
__int128 //有符号 128 位整数，范围为 -2^127 到 2^127 - 1（约 -1.7×10^38 到 1.7×10^38）。
unsigned __int128 //无符号 128 位整数，范围为 0 到 2^128 - 1（约 3.4×10^38）。
ceil() // 
for (auto& pair : umap) {  // 用引用避免拷贝，效率更高
    cout << "键：" << pair.first << "，值：" << pair.second << endl;
    // pair.second = 100;  // 可修改值
    } // unordered_map遍历
priority_queue<元素类型, 底层容器类型, 比较函数类型> /* e.g.
                                                    priority_queue<int, vector<int>, greater<int>> pq3(vec.begin(), vec.end());
                                                    底层容器类型默认为vector<>
                                                    比较函数类型默认为less<>
                                                    如果是greater<>, 则队首元素是整个队列中最小的元素
                                                    vec 是一个已存在的 vector<int> 容器
                                                    (vec.begin(), vec.end()) 是优先队列的构造函数参数，作用是初始化队列中的元素。
                                                    */


