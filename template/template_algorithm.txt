__builtin_popcountll(t) // 统计t在二进制下1的数量
stoi(t) // 将字符串t转化为int
to_string(t) // 将整数t转化为字符串
INT_MAX/INT_MIN //表示 int 类型所能存储的最大/最小整数
LLONG_MAX/LLONG_MIN // 表示 long long 类型所能存储的最大/最小整数
DBL_MAX/DBL_MIN // 表示 double 类型所能存储的最大/最小实数
setprecision() /*
                double num = 3.1415926535;
                // 输出小数点后2位（四舍五入）
                cout << fixed << setprecision(2) << num << endl;  // 输出：3.14
                不加  fixed  时， setprecision(n)  控制的是总有效数字位数（包括整数部分和小数部分）。
                加  fixed  后， setprecision(n)  控制的是小数点后的位数（即小数部分的位数）。
                */
lower_bound(x) // 返回指向set中第一个不小于（≥）x的元素的迭代器。
upper_bound(x) // 返回指向set中第一个大于（>）x的元素的迭代器。
assert(~) // ~为假则终止执行
fill(vec.begin(), vec.end(), 0); // 将vector所有元素重置为0
__int128 //有符号 128 位整数，范围为 -2^127 到 2^127 - 1（约 -1.7×10^38 到 1.7×10^38）。
unsigned __int128 //无符号 128 位整数，范围为 0 到 2^128 - 1（约 3.4×10^38）。
ceil() // 浮点数向上取整,且返回值为double
for (auto& pair : umap) {  // 用引用避免拷贝，效率更高
    cout << "键：" << pair.first << "，值：" << pair.second << endl;
    // pair.second = 100;  // 可修改值
    } // unordered_map遍历
priority_queue<元素类型, 底层容器类型, 比较函数类型> /* e.g.
                                                    priority_queue<int, vector<int>, greater<int>> pq3(vec.begin(), vec.end());
                                                    底层容器类型默认为vector<>
                                                    比较函数类型默认为less<>
                                                    如果是greater<>, 则队首元素是整个队列中最小的元素
                                                    vec 是一个已存在的 vector<int> 容器
                                                    (vec.begin(), vec.end()) 是优先队列的构造函数参数，作用是初始化队列中的元素。
                                                    */
vector<vector<int>> vec(N, vector<int>(N)) // 创建二维数组大小为[N][N]
reserve(n) // 预先为哈希表(unordered_map)分配足够的桶数量，确保容器至少能容纳 n 个元素而不需要触发「重哈希（rehash）」。
reverse(vec.begin(), vec.end()) // 反转vector元素的位置
advance(it, n) // 将迭代器it向后移动n（n可以为负），set容器不能通过[]访问元素，需要通过该函数使用迭代器访问。
unique(v.begin(), v.end()) // 移除容器中相邻的重复元素（不改变数组大小，仅将重复元素移动到数组末尾），同时返回第一个重复元素现在的迭代器
    unic.resize(unique(unic.begin(),unic.end())-unic.begin()); // 对vector变量unic进行去重（仅可去重相邻元素，一般搭配sort使用）
    unique_elements.erase(
        unique(unique_elements.begin(), unique_elements.end()),
        unique_elements.end()
    ); // 与上式功能一致
lower_bound(unic.begin(), unic.end(), a[i]) 在已排序的容器 unic 中，查找第一个大于或等于 a[i] 的元素的迭代器。
upper_bound(unic.begin(), unic.end(), a[i]) 在已排序的容器 unic 中，查找第一个大于 a[i] 的元素的迭代器。
unic.reserve(N); 提前为 vector容器类型变量 unic 分配至少能存储 N 个元素的内存空间，避免在后续向 unic 中添加元素频繁触发内存重新分配，从而提高程序效率。
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); 随机数生成器，后续生成随机数时，直接调用 rng() 即可。

